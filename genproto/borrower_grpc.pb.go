// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/borrower.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BorrowerServiceClient is the client API for BorrowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowerServiceClient interface {
	CreateBorrower(ctx context.Context, in *BorrowerCreate, opts ...grpc.CallOption) (*Borrower, error)
	GetBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Borrower, error)
	UpdateBorrower(ctx context.Context, in *BorrowerCreate, opts ...grpc.CallOption) (*Void, error)
	DeleteBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetAllBorrowers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Borrowers, error)
	BorrowerBooks(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*BorrowedBooks, error)
	GetOverdueBooks(ctx context.Context, in *OverdueRequest, opts ...grpc.CallOption) (*BorrowedBooks, error)
	HistoryUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*BorrowingHistory, error)
}

type borrowerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowerServiceClient(cc grpc.ClientConnInterface) BorrowerServiceClient {
	return &borrowerServiceClient{cc}
}

func (c *borrowerServiceClient) CreateBorrower(ctx context.Context, in *BorrowerCreate, opts ...grpc.CallOption) (*Borrower, error) {
	out := new(Borrower)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/CreateBorrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Borrower, error) {
	out := new(Borrower)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/GetBorrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) UpdateBorrower(ctx context.Context, in *BorrowerCreate, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/UpdateBorrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) DeleteBorrower(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/DeleteBorrower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetAllBorrowers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Borrowers, error) {
	out := new(Borrowers)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/GetAllBorrowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) BorrowerBooks(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*BorrowedBooks, error) {
	out := new(BorrowedBooks)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/BorrowerBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) GetOverdueBooks(ctx context.Context, in *OverdueRequest, opts ...grpc.CallOption) (*BorrowedBooks, error) {
	out := new(BorrowedBooks)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/GetOverdueBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowerServiceClient) HistoryUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*BorrowingHistory, error) {
	out := new(BorrowingHistory)
	err := c.cc.Invoke(ctx, "/protos.BorrowerService/HistoryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowerServiceServer is the server API for BorrowerService service.
// All implementations must embed UnimplementedBorrowerServiceServer
// for forward compatibility
type BorrowerServiceServer interface {
	CreateBorrower(context.Context, *BorrowerCreate) (*Borrower, error)
	GetBorrower(context.Context, *ById) (*Borrower, error)
	UpdateBorrower(context.Context, *BorrowerCreate) (*Void, error)
	DeleteBorrower(context.Context, *ById) (*Void, error)
	GetAllBorrowers(context.Context, *Void) (*Borrowers, error)
	BorrowerBooks(context.Context, *UserId) (*BorrowedBooks, error)
	GetOverdueBooks(context.Context, *OverdueRequest) (*BorrowedBooks, error)
	HistoryUser(context.Context, *UserId) (*BorrowingHistory, error)
	mustEmbedUnimplementedBorrowerServiceServer()
}

// UnimplementedBorrowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowerServiceServer struct {
}

func (UnimplementedBorrowerServiceServer) CreateBorrower(context.Context, *BorrowerCreate) (*Borrower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) GetBorrower(context.Context, *ById) (*Borrower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) UpdateBorrower(context.Context, *BorrowerCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) DeleteBorrower(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBorrower not implemented")
}
func (UnimplementedBorrowerServiceServer) GetAllBorrowers(context.Context, *Void) (*Borrowers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBorrowers not implemented")
}
func (UnimplementedBorrowerServiceServer) BorrowerBooks(context.Context, *UserId) (*BorrowedBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowerBooks not implemented")
}
func (UnimplementedBorrowerServiceServer) GetOverdueBooks(context.Context, *OverdueRequest) (*BorrowedBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverdueBooks not implemented")
}
func (UnimplementedBorrowerServiceServer) HistoryUser(context.Context, *UserId) (*BorrowingHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryUser not implemented")
}
func (UnimplementedBorrowerServiceServer) mustEmbedUnimplementedBorrowerServiceServer() {}

// UnsafeBorrowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowerServiceServer will
// result in compilation errors.
type UnsafeBorrowerServiceServer interface {
	mustEmbedUnimplementedBorrowerServiceServer()
}

func RegisterBorrowerServiceServer(s grpc.ServiceRegistrar, srv BorrowerServiceServer) {
	s.RegisterService(&BorrowerService_ServiceDesc, srv)
}

func _BorrowerService_CreateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).CreateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/CreateBorrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).CreateBorrower(ctx, req.(*BorrowerCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/GetBorrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetBorrower(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_UpdateBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowerCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).UpdateBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/UpdateBorrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).UpdateBorrower(ctx, req.(*BorrowerCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_DeleteBorrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).DeleteBorrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/DeleteBorrower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).DeleteBorrower(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetAllBorrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetAllBorrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/GetAllBorrowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetAllBorrowers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_BorrowerBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).BorrowerBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/BorrowerBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).BorrowerBooks(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_GetOverdueBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverdueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).GetOverdueBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/GetOverdueBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).GetOverdueBooks(ctx, req.(*OverdueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowerService_HistoryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowerServiceServer).HistoryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.BorrowerService/HistoryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowerServiceServer).HistoryUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowerService_ServiceDesc is the grpc.ServiceDesc for BorrowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BorrowerService",
	HandlerType: (*BorrowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBorrower",
			Handler:    _BorrowerService_CreateBorrower_Handler,
		},
		{
			MethodName: "GetBorrower",
			Handler:    _BorrowerService_GetBorrower_Handler,
		},
		{
			MethodName: "UpdateBorrower",
			Handler:    _BorrowerService_UpdateBorrower_Handler,
		},
		{
			MethodName: "DeleteBorrower",
			Handler:    _BorrowerService_DeleteBorrower_Handler,
		},
		{
			MethodName: "GetAllBorrowers",
			Handler:    _BorrowerService_GetAllBorrowers_Handler,
		},
		{
			MethodName: "BorrowerBooks",
			Handler:    _BorrowerService_BorrowerBooks_Handler,
		},
		{
			MethodName: "GetOverdueBooks",
			Handler:    _BorrowerService_GetOverdueBooks_Handler,
		},
		{
			MethodName: "HistoryUser",
			Handler:    _BorrowerService_HistoryUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/borrower.proto",
}
